{
	"nodes":[
		{"id":"d3306c6c3f55ea28","type":"group","x":58,"y":-190,"width":2462,"height":1287,"label":"Анонимные функции, ч. 1"},
		{"id":"463f030e10e9fe0f","type":"group","x":58,"y":1700,"width":3007,"height":911,"label":"Область видимости анонимной функции. Замыкание в функциях"},
		{"id":"b9037a965ac37c6a","x":58,"y":2668,"width":2369,"height":783,"type":"group","label":"Использование defer в связке с анонимными функциями"},
		{"id":"8fe09dc03896fb1a","type":"group","x":58,"y":1160,"width":1481,"height":453,"label":"Анонимные функции, ч.2"},
		{"id":"32b3af48871ed1dd","type":"text","text":"```go\nfunc Map(mapping func(rune) rune, s string) string\n```","x":882,"y":-54,"width":481,"height":60},
		{"id":"977f9636bb3d0f07","type":"text","text":"```go\nfunc invert(r rune) rune {\n\t// Если буква строчная, то она возвращается заглавной\n\tif unicode.IsLower(r) {\n\t\treturn unicode.ToUpper(r)\n\t}\n\t// Если нет, то возвращается строчной\n\treturn unicode.ToLower()\n}\n```","x":882,"y":345,"width":535,"height":237},
		{"id":"e3f615d4374fe0e6","type":"text","text":"Функция `Map` принимает два аргумента: функцию `mapping`, которая принимает символ `rune` и возвращает другой символ того же типа, и строку, к которой эта функция будет применяться. Возвращается новая строка, результат применения этой функции ко всем её символам","x":920,"y":60,"width":405,"height":208},
		{"id":"490cd57fc1beb2b3","type":"text","text":"Дальнейшее применение функции с помощью функции `Map`","x":1481,"y":420,"width":250,"height":87},
		{"id":"1aecb9862eaec8a6","type":"text","text":"```go\nfunc ExampleFirstClassFunctionArgument() {\n\tsource := \"aBcDeFg\"\n\ttest := \"AbCdEfG\"\n\n\t// Применение функции invert к каждому символу строки source\n\tsource = strings.Map(invert, source)\n\n\tfmt.Printf(\"Inverted string: %s. Result: %v \\n\", source, source == test)\n\t// Inverted string: AbCdEfG. Result: true\n}\n```","x":1803,"y":321,"width":697,"height":286},
		{"id":"233b9d83820c3a32","type":"text","text":"Здесь присутствует передача функции `invert` в функцию `strings.Map`, и она инвертирует регистр каждого символа строки `source`","x":2027,"y":660,"width":250,"height":207},
		{"id":"9ec86d02a104fc30","type":"text","text":"Считаются безымянными блоками кода, которые можно определить и использовать непосредственно на месте, где они нужны. Полезны в тех ситуациях, когда нужна небольшая функция для выполнения конкретной задачи, и нет необходимости явно объявлять ее отдельно","x":100,"y":164,"width":330,"height":268},
		{"id":"ae6eb233f4d75f63","type":"text","text":"```go\nfunc main() {\n\tmultiply := func(a, b int) int {\n\t\treturn a * b\n\t}\n\n\tresult := multiply(3, 4) // 12\n}\n```","x":78,"y":500,"width":374,"height":211},
		{"id":"f590ae8f2deb1956","type":"text","text":"Анонимные функции","x":-560,"y":-54,"width":250,"height":60},
		{"id":"fc005dc524268b33","type":"text","text":"В Golang функции могут быть переданы как аргументы в другие функции или возвращены как значения. Это позволяет создать гибкие и мощные конструкции для обработки данных","x":140,"y":-158,"width":250,"height":267},
		{"id":"6e4521688ba8fbda","type":"text","text":"Можно вернуть функцию в качестве значения. К примеру, создать функцию, которая возвращает функцию `invert`","x":560,"y":672,"width":250,"height":177},
		{"id":"d374df7950a9b156","type":"text","text":"```go\nfunc ReturnFunction() func(rune) rune {\n\treturn invert\n}\n```","x":905,"y":738,"width":420,"height":106},
		{"id":"021c3631655767bf","type":"text","text":"Вызвав `returnFunction`, мы получим функцию `invert` в качестве результата, которая можно использовать как обычную функцию","x":990,"y":900,"width":250,"height":177},
		{"id":"05422d33cc85ba69","type":"text","text":"Пример подобной передачи функции в качестве аргумента - функция `Map` из пакета `strings`, которая принимает функции, работающую с символами Unicode, и применяет ее ко всем символам строки","x":563,"y":-170,"width":250,"height":292},
		{"id":"cde10c2771ed2ab7","type":"text","text":"Пример функции, которая инвертирует регистр символов","x":563,"y":420,"width":250,"height":87},
		{"id":"f6ba46572f076e49","type":"text","text":"Создается анонимная функция `multiply`, которая принимает два параметра и возвращает их произведение. Затем функция присваивается переменной `multiply`, и её можно использовать как обычную функцию","x":140,"y":767,"width":250,"height":267},
		{"id":"03c4128d30c058e5","type":"text","text":"Когда мы объявляем функцию в Golang, то мы даем ей имя. Это позволяет легко использовать ее в разных частях программы. Как правило, объявляются на уровне пакета, что помогает организовать тестирование и улучшить поддержку кода, предоставляя функции ограниченную область видимости","x":78,"y":1180,"width":250,"height":412},
		{"id":"cc58d545ddbcfb0a","type":"text","text":"В некоторых случаях требуется выполнить задачу на месте, без необходимости создавать отдельную именованную функцию. Анонимные функции не имеют имени и могут быть использованы прямо в выражениях. Литерал анонимной функции записывается с помощью слова `func`, но без имени после этого ключевого слова","x":398,"y":1180,"width":250,"height":412},
		{"id":"69cd06ec45c69b38","type":"text","text":"Анонимные функции могут быть присвоены переменной, переданы в другие функции или даже вызваны прямо на месте","x":698,"y":1298,"width":250,"height":177},
		{"id":"a521d7743613f148","type":"text","text":"```go\nfunc ExampleUseNoNameFunction() {\n\t// Присваивание переменной fn анонимную функцию\n\tfn := func(a, b int) int { return a + b }\n\n\t// Выполнение анонимной функции прямо на месте\n\tfunc(a, b int) {\n\t\treturn a + b\n\t}(12, 34) // Вызов анонимной функции\n\n\t// Выполнение функции, присвоенную переменной fn\n\tfmt.Println(fn(17, 15))\n\n\t// Результат:\n\t// 46\n\t// 32\n}\n```","x":1007,"y":1181,"width":512,"height":412},
		{"id":"ba5d07ca471644c7","type":"text","text":"```go\n// externalFunction объявляет функцию, которая возвращает другую функцию (анонимную)\n// Это пример функции, возвращающей замыкание (closure)\nfunc externalFunction() func() {\n\ttext := \"TEXT\" // Локальная переменная внутри externalFunction\n\n\treturn func() { // Возвращаемая анонимная функция\n\t\tfmt.Println(text) // Анонимная функция имеет доступ к text, даже после завершения externalFunction\n\t}\n}\n\n// ExampleEnvironment демонстрирует работу замыкания\nfunc ExampleEnvironment() {\n\t// Переменная fn получает функцию, возвращённую из externalFunction\n\t// Теперь fn содержит замыкание, которое \"запоминает\" переменную text\n\tfn := externalFunction()\n\n\t// Вызов fn() печатает \"TEXT\", потому что замыкание сохраняет доступ к text\n\tfn()\n}\n```","x":698,"y":1814,"width":762,"height":496},
		{"id":"f28afe9e0efc04fa","type":"text","text":"В отличие от обычной именованной функции, анонимная функция имеет доступ к окружению, в котором она была объявлена","x":398,"y":1974,"width":250,"height":177},
		{"id":"484267063fa8cf9d","type":"text","text":"Область видимости анонимной функции. Замыкание","x":78,"y":2019,"width":250,"height":87},
		{"id":"3288f2080ad00e3a","type":"text","text":"Замыкание (closure) - функция, которая \"запоминает\" окружение, в котором она была созда","x":500,"y":2414,"width":250,"height":147},
		{"id":"3fbf629c71ec041b","type":"text","text":"`externalFunction` создает переменную `text` и возвращает анонимную функцию, которая использует эту переменную","x":780,"y":2414,"width":250,"height":177},
		{"id":"9d13c5ff330975d0","type":"text","text":"Даже после завершения `externalFunction`, анонимная функция (`fn`) все еще может обращаться к `text`","x":1060,"y":2414,"width":250,"height":147},
		{"id":"1a95c97b0153ffb3","type":"text","text":"В `ExampleEnvironment` вызывается `fn()`, и она выводит `TEXT`, потому что замыкание сохранило ссылку на `text`","x":1362,"y":2414,"width":250,"height":177},
		{"id":"1ff53c649bfe4ee6","type":"text","text":"```go\npackage main  \n  \nimport \"fmt\"  \n  \n// createCounter возвращает функцию-счётчик.// Важно: возвращаемая функция \"замыкает\" (запоминает) переменную `count`,  \n// потому что она была объявлена в её лексическом окружении (внешней функции).  \nfunc createCounter() func() int {  \n    // `count` — локальная переменная внешней функции createCounter.  \n    // Лексическое окружение внутренней функции включает `count`,    // поэтому она может читать и изменять её даже после завершения createCounter.    count := 0  \n  \n    return func() int {  \n       count++ // Изменяем \"замкнутую\" переменную.  \n       return count  \n    }  \n}  \n  \nfunc main() {  \n    // 1. Создаём замыкание. Теперь `counter` — это функция,  \n    //    которая хранит доступ к своему лексическому окружению (переменной `count`).    counter := createCounter()  \n  \n    // 2. Каждый вызов counter() увеличивает `count` на 1.  \n    //    Переменная `count` \"живёт\" между вызовами, потому что её сохранило замыкание.    fmt.Println(counter()) // 1  \n    fmt.Println(counter()) // 2  \n    fmt.Println(counter()) // 3  \n  \n    // 3. Новое замыкание — новое лексическое окружение.    //    anotherCounter работает со своей собственной копией `count`.    anotherCounter := createCounter()  \n    fmt.Println(anotherCounter()) // 1 (не зависит от первого счётчика)  \n}\n```","x":1700,"y":1720,"width":1345,"height":685},
		{"id":"7fcd8360a970d024","type":"text","text":"Отложенный вызов анонимной функции","x":78,"y":2800,"width":250,"height":60},
		{"id":"1efdd61648596840","type":"text","text":"Golang позволяет отложить вызов внутренней функции до завершения внешней функции","x":398,"y":2757,"width":250,"height":147},
		{"id":"2bde2cb57689da37","type":"text","text":"Делается это с помощью ключевого слова `defer` перед вызовом функции. Отложенные функции выполняются в обратном порядке (LIFO - last in first out)","x":698,"y":2727,"width":250,"height":207},
		{"id":"debc16406ab67cb3","x":1020,"y":2688,"width":525,"height":286,"type":"text","text":"```go\nfunc ExampleDefer1() {\n\tdefer func() { fmt.Println(1) }()\n\n\tdefer func() { fmt.Println(2) }()\n\n\tdefer func() { fmt.Println(3) }()\n}\n// 3\n// 2\n// 1\n```"},
		{"id":"ff3788cd6d4b5edc","x":1094,"y":3041,"width":378,"height":178,"type":"text","text":"С помощью отложенного вызова функции часто закрываются файлы и соединения, а также осуществляется обработка паники в работе функции, при этом используются возможности анонимных функций"},
		{"id":"6e8c4a48906e765a","x":1612,"y":2830,"width":795,"height":601,"type":"text","text":"```go\nfunc someFuncWithPanic() {\n\t// Отложенный вызов анонимной функции, проверяющей, что работа функции завершена\n\t// без ошибок. Если функция recover() возвращает что угодно кроме nil, значит в ходе\n\t// выполнения функции возникла паника\n\tdefer func() {\n\t\tif e := recover(); e != nil {\n\t\t\t// Здесь происходит приведение интерфейса.\n\t\t\t// Результат приведения присваивается переменной err типа error\n\t\t\t// которая уже объявлена при самом вызове функции someFuncWithPanic\n\t\t\terr = e.(error)\n\n\t\t\t// После этого анонимная функция завершает свою работу, паника обработана,\n\t\t\t// переменная err, в которой содержится информация о возникшей панике,\n\t\t\t// возвращается как результат выполнения функции\n\t\t}\n\t}()\n\tpanic(errors.New(\"Fatal error\"))\n}\n\nfunc ExamplePanicRecover() {\n\tif err := someFuncWithPanic(); err != nil {\n\t\tfmt.Println(err)\n\t}\n\t// \"Fatal error\"\n}\n```"}
	],
	"edges":[
		{"id":"e34c6131b229a6df","fromNode":"f590ae8f2deb1956","fromSide":"right","toNode":"fc005dc524268b33","toSide":"left"},
		{"id":"606ddaec5388d54f","fromNode":"fc005dc524268b33","fromSide":"right","toNode":"05422d33cc85ba69","toSide":"left"},
		{"id":"12082477d4c2389d","fromNode":"05422d33cc85ba69","fromSide":"right","toNode":"32b3af48871ed1dd","toSide":"left"},
		{"id":"287fdbaf931b843e","fromNode":"32b3af48871ed1dd","fromSide":"bottom","toNode":"e3f615d4374fe0e6","toSide":"top"},
		{"id":"07b34b81dea44d1c","fromNode":"fc005dc524268b33","fromSide":"right","toNode":"cde10c2771ed2ab7","toSide":"left"},
		{"id":"13f5ee0c46bf9250","fromNode":"cde10c2771ed2ab7","fromSide":"right","toNode":"977f9636bb3d0f07","toSide":"left"},
		{"id":"3273081125b179c9","fromNode":"977f9636bb3d0f07","fromSide":"right","toNode":"490cd57fc1beb2b3","toSide":"left"},
		{"id":"ca0fa54c1c14d728","fromNode":"490cd57fc1beb2b3","fromSide":"right","toNode":"1aecb9862eaec8a6","toSide":"left"},
		{"id":"2fcf18cdf3c477b5","fromNode":"1aecb9862eaec8a6","fromSide":"bottom","toNode":"233b9d83820c3a32","toSide":"top"},
		{"id":"737262cec555cbd5","fromNode":"cde10c2771ed2ab7","fromSide":"bottom","toNode":"6e4521688ba8fbda","toSide":"top"},
		{"id":"4818a2ab6cf8d80e","fromNode":"6e4521688ba8fbda","fromSide":"right","toNode":"d374df7950a9b156","toSide":"left"},
		{"id":"017d560efc31d030","fromNode":"d374df7950a9b156","fromSide":"bottom","toNode":"021c3631655767bf","toSide":"top"},
		{"id":"2090f32125247028","fromNode":"fc005dc524268b33","fromSide":"bottom","toNode":"9ec86d02a104fc30","toSide":"top"},
		{"id":"6a8bb99cba662c3e","fromNode":"9ec86d02a104fc30","fromSide":"bottom","toNode":"ae6eb233f4d75f63","toSide":"top"},
		{"id":"786b2a3a9653b9ea","fromNode":"ae6eb233f4d75f63","fromSide":"bottom","toNode":"f6ba46572f076e49","toSide":"top"},
		{"id":"79558cae32b5d06b","fromNode":"f590ae8f2deb1956","fromSide":"right","toNode":"03c4128d30c058e5","toSide":"left"},
		{"id":"a9f39a683ebf1585","fromNode":"03c4128d30c058e5","fromSide":"right","toNode":"cc58d545ddbcfb0a","toSide":"left"},
		{"id":"fab50d9295b6f117","fromNode":"cc58d545ddbcfb0a","fromSide":"right","toNode":"69cd06ec45c69b38","toSide":"left"},
		{"id":"95b8047e92a70e0c","fromNode":"69cd06ec45c69b38","fromSide":"right","toNode":"a521d7743613f148","toSide":"left"},
		{"id":"4e1aff20c600d4fe","fromNode":"f590ae8f2deb1956","fromSide":"right","toNode":"484267063fa8cf9d","toSide":"left"},
		{"id":"7ac0255c8e74f471","fromNode":"484267063fa8cf9d","fromSide":"right","toNode":"f28afe9e0efc04fa","toSide":"left"},
		{"id":"1419daf35db0ed2b","fromNode":"f28afe9e0efc04fa","fromSide":"right","toNode":"ba5d07ca471644c7","toSide":"left"},
		{"id":"d6c13fe86e32f52d","fromNode":"ba5d07ca471644c7","fromSide":"bottom","toNode":"3288f2080ad00e3a","toSide":"top"},
		{"id":"f3ae7f1fdd24ac94","fromNode":"ba5d07ca471644c7","fromSide":"bottom","toNode":"3fbf629c71ec041b","toSide":"top"},
		{"id":"2413213f9410a3a2","fromNode":"ba5d07ca471644c7","fromSide":"bottom","toNode":"9d13c5ff330975d0","toSide":"top"},
		{"id":"75012621ad3bf3a6","fromNode":"ba5d07ca471644c7","fromSide":"bottom","toNode":"1a95c97b0153ffb3","toSide":"top"},
		{"id":"4b39f19ceebeadd3","fromNode":"ba5d07ca471644c7","fromSide":"right","toNode":"1ff53c649bfe4ee6","toSide":"left"},
		{"id":"1ce24d7dfc421938","fromNode":"f590ae8f2deb1956","fromSide":"right","toNode":"7fcd8360a970d024","toSide":"left"},
		{"id":"22790da459736453","fromNode":"7fcd8360a970d024","fromSide":"right","toNode":"1efdd61648596840","toSide":"left"},
		{"id":"8a6a2e46c7cfe9ae","fromNode":"1efdd61648596840","fromSide":"right","toNode":"2bde2cb57689da37","toSide":"left"},
		{"id":"81976aa499b34e15","fromNode":"2bde2cb57689da37","fromSide":"right","toNode":"debc16406ab67cb3","toSide":"left"},
		{"id":"0395ffaff9e6ba47","fromNode":"debc16406ab67cb3","fromSide":"bottom","toNode":"ff3788cd6d4b5edc","toSide":"top"},
		{"id":"c06787c99b0218eb","fromNode":"ff3788cd6d4b5edc","fromSide":"right","toNode":"6e8c4a48906e765a","toSide":"left"}
	]
}
{
	"nodes":[
		{"id":"5056ea7e628e8add","x":-180,"y":2845,"width":3170,"height":1517,"type":"group","label":"Области видимости"},
		{"id":"59b5d12411dcb0d2","type":"group","x":1622,"y":-304,"width":3022,"height":1031,"label":"Параметры функции"},
		{"id":"838c9c3f1aa9d6e9","x":1558,"y":1452,"width":2095,"height":1355,"type":"group","label":"Функции с переменным количеством аргументов"},
		{"id":"6ef6687110428b35","type":"group","x":-180,"y":852,"width":2398,"height":534,"label":"Возврат результата из функции, оператор return"},
		{"id":"e6c6b8f1e3837ec2","type":"group","x":-180,"y":-160,"width":1642,"height":711,"label":"Сущность функции"},
		{"id":"c4930d37d0dab69c","type":"group","x":2320,"y":852,"width":1458,"height":593,"label":"Возврат нескольких значений из функции, оператор return"},
		{"id":"c986948e0c7715cb","type":"group","x":-180,"y":1415,"width":1595,"height":431,"label":"Игнорирование возвращаемых значений"},
		{"id":"4856ca9bc88fd69c","type":"text","text":"Для этого нужно после списка входящих параметров функции указать тип возвращаемого значения","x":153,"y":1189,"width":250,"height":177},
		{"id":"1ee9904b4021a920","type":"text","text":"Присутствует возможность проигнорировать все или определенные возвращаемые значения от функции, если не нужно их использовать в дальнейшем","x":154,"y":1511,"width":250,"height":237},
		{"id":"bdeee550bfc487b7","type":"text","text":"Для этого не нужно присваивать им имена вообще либо заменить имя символом \"_\"","x":441,"y":1571,"width":250,"height":118},
		{"id":"5981d62150628e6e","type":"text","text":"```go\nfunc fn() (int, error) {\n\t// block of code\n}\n\nfunc IgnoreExample() {\n\tfn()\n\n\ti, _ := fn()\n\tfmt.Println(i) // Возвращает только значения из функции\n\n\t_, err := fn() // Возвращает только ошибки из функции\n\tif err == nil { // Если ошибок нет, то вывод соответствующий\n\t\tfmt.Println(\"Ошибок нет\")\n\t}\n}\n```","x":760,"y":1435,"width":635,"height":391},
		{"id":"61b08c1523872615","type":"text","text":"```go\nfunc main()\nvar a = add(4, 5) // значением переменной будет результат функции\nvar b = add(6, 7) // значением переменной будет результат функции\nfmt.Println(a)\nfmt.Println(b)\n\nfunc add(x, y int) int { // функция, принимающие два аргумента\n\treturn x + y // возврат результата из функции\n}\n```","x":1578,"y":872,"width":620,"height":264},
		{"id":"3bb5223b1ca1a761","type":"text","text":"Для возврата результата действий функции, необходимо использовать оператор `return`, после которого указывается возвращаемое значение","x":154,"y":900,"width":250,"height":207},
		{"id":"3b4624cda3a56f3c","type":"text","text":"```go\nfunc имя_функции (список_входных_параметров) (список_возвращаемых_типов_данных) {\n\t// тело функции\n}\n```","x":480,"y":951,"width":735,"height":106},
		{"id":"d2b38396d2ebf950","type":"text","text":"Пример: вернуть из функции сумму двух чисел","x":1258,"y":960,"width":250,"height":87},
		{"id":"c2875b17ede2c3f5","type":"text","text":"Возвращение результата из функции","x":-160,"y":974,"width":250,"height":60},
		{"id":"b83f94ea0eb895ac","type":"text","text":"Игнорирование возвращаемых значений","x":-160,"y":1600,"width":250,"height":60},
		{"id":"060165c9c5900a35","type":"text","text":"Возвращение нескольких значений","x":2340,"y":1000,"width":250,"height":60},
		{"id":"9adcf88e4801e2f8","type":"text","text":"```go\nfunc main() {\n\thello() // Вызов функции\n}\n\nfunc hello() { // Создание функции\n\tfmt.Println(\"Hello, world!\")\n}\n```","x":922,"y":320,"width":358,"height":211},
		{"id":"b073c91e10f21a20","type":"text","text":"Для возврата нескольких значений из функции, необходимо в объявлении функции прописать несколько выходных аргументов внутри скобок. В теле функции у оператора `return` нужно написать несколько значений через запятую","x":2654,"y":872,"width":250,"height":316},
		{"id":"9346acf9a78b3aaa","type":"text","text":"Пример вызова функции и создания функции","x":976,"y":237,"width":250,"height":58},
		{"id":"26d62262dff42ff9","type":"text","text":"Представляет собой блок операторов, которые все вместе выполняют какую-то определенную задачу. С помощью функций можно многократно вызывать ее блок операторов как единой целое в других частях программы","x":150,"y":-42,"width":250,"height":316},
		{"id":"8a1c1b306f4dcdfc","type":"text","text":"Значения передаются \"по позиции\". То есть первое значение получит первый параметр, второе значение - второй параметр","x":2758,"y":80,"width":250,"height":207},
		{"id":"64319d6b38ca16a4","type":"text","text":"Функции","x":-160,"y":86,"width":250,"height":60},
		{"id":"697d237e37503570","type":"text","text":"Синтаксис объявления функции","x":460,"y":86,"width":250,"height":60},
		{"id":"a71003d9be5901e6","type":"text","text":"```go\nfunc имя_функции (список_входящих_аргументов) (типы возвращаемых значений) {\n\tвыполняемые_операторы\n}\n```","x":760,"y":63,"width":682,"height":106},
		{"id":"91f325766f0f42bf","type":"text","text":"Через параметры функция получает входные параметры. Параметры указываются в скобках после имени функции. Для каждого параметра указывается имя и тип (как для переменной). Разделяются аргументы запятой. При вызове функций необходимо передать значения всех ее параметров","x":1960,"y":-284,"width":250,"height":388},
		{"id":"be1ead7182a2227c","type":"text","text":"```go\nfunc main() {\n\tvar age, name = add(4, 5,  \"Tom\", \"Simpson\")\n\tfmt.Println(age) // 9\n\tfmt.Println(name) // Tom Simpson\n}\n\nfunc add(x, y int, a, b string) (int, string) {\n\tvar z int = x + y\n\tvar fullName = a + \" \" + b\n\treturn z, fullName\n}\n```","x":2980,"y":877,"width":473,"height":307},
		{"id":"5ee58037ceb0c93f","type":"text","text":"Альтернативный способ\n```go\nage, name := add(4, 5, \"Tom\", \"Simpson\")\n```","x":3008,"y":1240,"width":418,"height":104},
		{"id":"aa1f8281f6473f7d","type":"text","text":"Важно помнить, что краткое объявление переменных доступно только внутри функций (вкл. `main`)","x":976,"y":-140,"width":250,"height":147},
		{"id":"0cf9534221a4631a","type":"text","text":"```go\nfunc main() {\n\tadd(4, 5) // \"4, 5\" - входные аргументы, результат 9\n\tadd(20, 6) // \"20, 6\" - входные аргументы, результат 26\n}\n\n// функция add принимает два целочисленных параметра - Х и Y. \n// в качестве возвращаемого значения - целочисленное значение\nfunc add(x int, y int) int {\n\tfmt.Println(x + y)\n}\n```","x":2600,"y":-233,"width":566,"height":286},
		{"id":"27e08b8f05d39986","type":"text","text":"Если несколько параметров имеют один и тот же тип данных, то можно указать тип только для последнего параметра, а предыдущие будут представлять тот же тип данных","x":3229,"y":-223,"width":236,"height":267},
		{"id":"af1ab075466be328","type":"text","text":"Параметры функции","x":1642,"y":-120,"width":250,"height":60},
		{"id":"fce339fb7e5f16ba","type":"text","text":"Пример","x":2282,"y":-120,"width":250,"height":60},
		{"id":"4a26d164cb747d1a","type":"text","text":"Несколько возвращаемых значений указываются после оператора `return` через запятую","x":3508,"y":957,"width":250,"height":147},
		{"id":"d5d34cf5d0ebef4f","type":"text","text":"То что внутри функции `add` при объявлении двух переменных находится 4 аргумента - не страшно, т.к. функция возвращает два значения, которые присваиваются по порядку","x":3508,"y":1158,"width":250,"height":267},
		{"id":"1fc11d0ee5299eec","type":"text","text":"```go\nfunc main() {\n\tadd(1,2, 3.4, 5.6, 1.2)\n}\n\nfunc add(x, y int, a, b, c float32) {\n\tvar z = x + y\n\tvar d = a + b = c\n\tfmt.Println(z)\n\tfmt.Println(d)\n}\n```","x":3580,"y":-232,"width":394,"height":286},
		{"id":"3ea6cf289d398f64","type":"text","text":"В качестве аргументов при вызове функций можно передавать и значения переменных, результаты операций или других функций. Но если аргументы передаются в функцию по значению, то они копируются","x":3652,"y":120,"width":250,"height":292},
		{"id":"b40b1723d19af94b","type":"text","text":"```go\nfunc main() {\n\tvar a = 8\n\tfmt.Printf(\"a before: %v\", a)\n\tincrement(a)\n\tfmt.Printf(\"a after: %v\", a)\n}\n\nfunc increment(x int) {\n\tfmt.Printf(\"x before: %v\", x)\n\tx = x + 20\n\tfmt.Printf(\"x after: %v\", x)\n}\n```","x":3974,"y":102,"width":366,"height":328},
		{"id":"0930af61b1306eae","type":"text","text":"Значение переменной `a` не увеличилось, т.к. функция работает с копией этой переменной, но при всем этом, значение Х увеличилось","x":4032,"y":500,"width":250,"height":207},
		{"id":"6545ade0461fe1ca","type":"text","text":"```go\n// Вывод:\n// a before: 8\n// x before: 8\n// x after: 28\n// a after: 8\n```","x":4420,"y":187,"width":204,"height":159},
		{"id":"d08b13fa8921259c","x":1578,"y":1600,"width":250,"height":60,"type":"text","text":"Функции с переменным количеством аргументов"},
		{"id":"e4ef02aefe98bdf0","x":1885,"y":1600,"width":250,"height":60,"type":"text","text":"Пример из функции `fmt.Print`"},
		{"id":"77daf47f15051d3d","x":2196,"y":1603,"width":458,"height":54,"type":"text","text":"```go\nfunc Print(a ...interface{}) (n int, err error)\n```"},
		{"id":"a552701f0c7a404e","x":2300,"y":1723,"width":250,"height":207,"type":"text","text":"Символ многоточия перед указанием типа указывает, что в функцию можно передать произвольное количество параметров указанного типа"},
		{"id":"351cfb51d2405867","x":2299,"y":1988,"width":250,"height":87,"type":"text","text":"Аргументы с многоточием - срез заданного элемента"},
		{"id":"cc40811203ebf724","x":2730,"y":1472,"width":250,"height":316,"type":"text","text":"Если функция принимает определенные аргументы и еще произвольное количество аргументов определенного типа, то при объявлении функции эти \"переменные\" аргументы указываются в самом конце"},
		{"id":"067d9853dff4a885","x":3067,"y":1603,"width":566,"height":54,"type":"text","text":"```go\nfunc Fprint(w io.Writer, a ...interface{}) (n int, err error)\n```"},
		{"id":"f79e3d30fe6a2e68","x":3122,"y":1720,"width":456,"height":88,"type":"text","text":"Функция принимает обязательный аргумент типа `io.Writer` и произвольное количество аргументов типа `interface{}`"},
		{"id":"1fc07920ff28499d","x":1578,"y":2260,"width":250,"height":207,"type":"text","text":"Обратный способ использования многоточия - разворачивание/раскрытие среза путем указания справа от среза языка многоточия"},
		{"id":"aa3c3ba74fc8b742","x":1888,"y":2271,"width":371,"height":185,"type":"text","text":"```go\nfunc ExampleExpandSlice1() {\n\ts := []inteface{}{1,2,3,4,5}\n\n\tfmt.Println(s) //  [1,2,3,4,5]\n\tfmt.Println(s...) // 1,2,3,4,5\n}\n```"},
		{"id":"55e681e5548513ac","x":1949,"y":2500,"width":250,"height":267,"type":"text","text":"При первом вызове функции `fmt.Println` был напечатан результат был напечатан в виде среза, а во втором вызове отображен вызов отдельных значений, входящих в срез"},
		{"id":"f1e74ce7ffa71717","x":2326,"y":2189,"width":682,"height":349,"type":"text","text":"```go\nfunc ExampleExpandSlice2() {\n\ts1 := []int{1,2,3,4,5}\n\ts2 := []int{6,7,8,9,10}\n\n\t// append(slice []Type, elems ...Type) []Type\n\n\t// s1 = append(s1, s2) не сработает, т.к. второй и\n\t// последующие аргументы должны быть integer\n\n\ts1 = append(s1, s2...)\n\tfmt.Println(s1) // [1 2 3 4 5 6 7 8 9 10]\n}\n\n```"},
		{"id":"ee825ef50c00a9f0","x":2542,"y":2580,"width":250,"height":207,"type":"text","text":"Сигнатура функции `append` приведена в комментарии. Из-за того что есть возможность развернуть слайс, это можно применить в связке с `append`"},
		{"id":"528b99faf1ee53ed","x":-160,"y":3040,"width":250,"height":60,"type":"text","text":"Область видимости"},
		{"id":"4a0e9a4f1ed4c8a7","x":160,"y":2982,"width":250,"height":177,"type":"text","text":"Является частью исходного кода, в котором использование объявленного имени ссылается на сущность из этого объявления"},
		{"id":"79ecc76872fc3935","x":480,"y":3012,"width":250,"height":118,"type":"text","text":"Область видимости определяется лексическими блоками, к которым относятся"},
		{"id":"b0a7d140923069f7","x":840,"y":2865,"width":250,"height":147,"type":"text","text":"Синтаксические блоки (последовательность инструкций, заключенных в фигурные скобки)"},
		{"id":"b2cf8be41535b542","x":840,"y":3099,"width":250,"height":267,"type":"text","text":"Прочие блоки, которые явно не охватываются фигурными скобками в исходном тексте, но имеют схожее поведение: всеобщий блок, блок для каждого пакета, блок для каждого файла"},
		{"id":"9531ddd79fb8491c","x":1200,"y":3013,"width":250,"height":117,"type":"text","text":"Имя, объявленное внутри синтаксического блока, невидимо вне блока"},
		{"id":"780b479b7072a542","x":1540,"y":2908,"width":443,"height":328,"type":"text","text":"```go\nfunc scope() {\n\tv := 1\n\tfmt.Print(v)\n}\n\nfunc main() {\n\tscope()\n\tfmt.Print(v) // compile error\n}\n// Из функции main нельзя получить доступ к переменной V, потому что она объявлена и используется внутри функции scope\n```"},
		{"id":"05c344d937176240","x":1637,"y":3280,"width":250,"height":364,"type":"text","text":"Программа может содержать несколько объявлений одного и того же имени при условии, что все объявления находятся в различных лексических блоках. Например - можно объявить локальную переменную с тем же именем, что и переменная уровня пакета"},
		{"id":"18433298244c3cc9","x":1983,"y":3267,"width":638,"height":391,"type":"text","text":"```go\nfunc ExampleScope1() {\n\tvar v int = 1\n\n\t{\n\t\t// Здесь переменная из внешнего лексического блока затеняется\n\t\t// переменной внутреннего лексического блока\n\t\tvar v string = \"2\"\n\t\tfmt.Println(v)\n\t}\n\n\tfmt.Println(v)\n\t// output:\n\t// 2\n\t// 1\n}\n```"},
		{"id":"99a251f518b0a219","x":1930,"y":3720,"width":744,"height":622,"type":"text","text":"```go\nfunc ExampleScope2() {\n\tvar i string = \"Строка\"\n\n\t// Переменная i объявляется вне фигурных скобок, тем не менее это\n\t// отдельная область видимости, к котором имеет доступ вторая область видимости\n\t// которая уже заключена в фигурные скобки\n\n\tfor i := 0; i < 1; i++ {\n\t\tfmt.Println(i)\n\t}\n\n\t// Аналогично примеру выше, можно объявить переменную i в области видимости\n\t// вне фигурных скобок, а в теле цикла (отдельная область видимости) - \n\t// затенять переменную i\n\tfor i := 0; i < 1; i++ {\n\t\ti := true\n\t\tfmt.Println(i)\n\t}\n\n\tfmt.Println(i)\n}\n\n// output:\n// 0\n// true\n// Строка\n```"},
		{"id":"c2a568ec4e21694d","x":2720,"y":3942,"width":250,"height":177,"type":"text","text":"Аналогично конструкции цикла `for`, такие неявные области видимости создаются конструкциями if, switch, select"}
	],
	"edges":[
		{"id":"3f3b5a887109cd1a","fromNode":"64319d6b38ca16a4","fromSide":"right","toNode":"26d62262dff42ff9","toSide":"left"},
		{"id":"bc83d28d37b3932c","fromNode":"26d62262dff42ff9","fromSide":"right","toNode":"697d237e37503570","toSide":"left"},
		{"id":"9bba0b001cdb7b76","fromNode":"697d237e37503570","fromSide":"right","toNode":"a71003d9be5901e6","toSide":"left"},
		{"id":"36ac1a7c7aa881d1","fromNode":"a71003d9be5901e6","fromSide":"bottom","toNode":"9346acf9a78b3aaa","toSide":"top"},
		{"id":"f8c924946e7da4f8","fromNode":"9346acf9a78b3aaa","fromSide":"bottom","toNode":"9adcf88e4801e2f8","toSide":"top"},
		{"id":"ca2eb31bf03c8e6a","fromNode":"a71003d9be5901e6","fromSide":"top","toNode":"aa1f8281f6473f7d","toSide":"bottom"},
		{"id":"9b09b6acc763d569","fromNode":"af1ab075466be328","fromSide":"right","toNode":"91f325766f0f42bf","toSide":"left"},
		{"id":"d71e1119caff0267","fromNode":"91f325766f0f42bf","fromSide":"right","toNode":"fce339fb7e5f16ba","toSide":"left"},
		{"id":"f12d7ac919aff0b4","fromNode":"fce339fb7e5f16ba","fromSide":"right","toNode":"0cf9534221a4631a","toSide":"left"},
		{"id":"d7ad36993a7910fe","fromNode":"0cf9534221a4631a","fromSide":"bottom","toNode":"8a1c1b306f4dcdfc","toSide":"top"},
		{"id":"4a6da6fb6c8f5453","fromNode":"0cf9534221a4631a","fromSide":"right","toNode":"27e08b8f05d39986","toSide":"left"},
		{"id":"7472f3c28dcdcde1","fromNode":"27e08b8f05d39986","fromSide":"right","toNode":"1fc11d0ee5299eec","toSide":"left"},
		{"id":"220af77206a986a1","fromNode":"1fc11d0ee5299eec","fromSide":"bottom","toNode":"3ea6cf289d398f64","toSide":"top"},
		{"id":"77a47e2b84e0ee0d","fromNode":"3ea6cf289d398f64","fromSide":"right","toNode":"b40b1723d19af94b","toSide":"left"},
		{"id":"8d1da273b752f182","fromNode":"b40b1723d19af94b","fromSide":"right","toNode":"6545ade0461fe1ca","toSide":"left"},
		{"id":"68dd6aa7e5af5f11","fromNode":"b40b1723d19af94b","fromSide":"bottom","toNode":"0930af61b1306eae","toSide":"top"},
		{"id":"feb9e42b857b368f","fromNode":"c2875b17ede2c3f5","fromSide":"right","toNode":"3bb5223b1ca1a761","toSide":"left"},
		{"id":"967fa2f3bef9793e","fromNode":"3bb5223b1ca1a761","fromSide":"bottom","toNode":"4856ca9bc88fd69c","toSide":"top"},
		{"id":"87ea2e5e5db84ce0","fromNode":"3bb5223b1ca1a761","fromSide":"right","toNode":"3b4624cda3a56f3c","toSide":"left"},
		{"id":"3d074acfd6f066af","fromNode":"3b4624cda3a56f3c","fromSide":"right","toNode":"d2b38396d2ebf950","toSide":"left"},
		{"id":"b3c78aa32be982ec","fromNode":"d2b38396d2ebf950","fromSide":"right","toNode":"61b08c1523872615","toSide":"left"},
		{"id":"0e064d23071c84ca","fromNode":"060165c9c5900a35","fromSide":"right","toNode":"b073c91e10f21a20","toSide":"left"},
		{"id":"a8bdc3690a19fda7","fromNode":"b073c91e10f21a20","fromSide":"right","toNode":"be1ead7182a2227c","toSide":"left"},
		{"id":"2a0e189408f8fafd","fromNode":"be1ead7182a2227c","fromSide":"right","toNode":"4a26d164cb747d1a","toSide":"left"},
		{"id":"a9c9d2cacaa5b7cb","fromNode":"4a26d164cb747d1a","fromSide":"bottom","toNode":"d5d34cf5d0ebef4f","toSide":"top"},
		{"id":"d64908d3b337f68a","fromNode":"be1ead7182a2227c","fromSide":"bottom","toNode":"5ee58037ceb0c93f","toSide":"top"},
		{"id":"e71f971e53885eb1","fromNode":"b83f94ea0eb895ac","fromSide":"right","toNode":"1ee9904b4021a920","toSide":"left"},
		{"id":"5477e6f704787cd7","fromNode":"1ee9904b4021a920","fromSide":"right","toNode":"bdeee550bfc487b7","toSide":"left"},
		{"id":"acd64eddc0cdcfd0","fromNode":"bdeee550bfc487b7","fromSide":"right","toNode":"5981d62150628e6e","toSide":"left"},
		{"id":"8996ea22b7e70728","fromNode":"d08b13fa8921259c","fromSide":"right","toNode":"e4ef02aefe98bdf0","toSide":"left"},
		{"id":"1dea565ecbbf0e33","fromNode":"e4ef02aefe98bdf0","fromSide":"right","toNode":"77daf47f15051d3d","toSide":"left"},
		{"id":"70957b20a7d82c89","fromNode":"77daf47f15051d3d","fromSide":"bottom","toNode":"a552701f0c7a404e","toSide":"top"},
		{"id":"d303f475e9fc23cd","fromNode":"a552701f0c7a404e","fromSide":"bottom","toNode":"351cfb51d2405867","toSide":"top"},
		{"id":"1582a12d590f8fd1","fromNode":"77daf47f15051d3d","fromSide":"right","toNode":"cc40811203ebf724","toSide":"left"},
		{"id":"4b9c5c92450df4cc","fromNode":"cc40811203ebf724","fromSide":"right","toNode":"067d9853dff4a885","toSide":"left"},
		{"id":"c2f3278d1c5380a9","fromNode":"067d9853dff4a885","fromSide":"bottom","toNode":"f79e3d30fe6a2e68","toSide":"top"},
		{"id":"7adfc96b604c0047","fromNode":"d08b13fa8921259c","fromSide":"bottom","toNode":"1fc07920ff28499d","toSide":"top"},
		{"id":"7daafb4e313c7c1a","fromNode":"1fc07920ff28499d","fromSide":"right","toNode":"aa3c3ba74fc8b742","toSide":"left"},
		{"id":"3cbe536216cb3f76","fromNode":"aa3c3ba74fc8b742","fromSide":"bottom","toNode":"55e681e5548513ac","toSide":"top"},
		{"id":"4c3ef7a4e57c6e42","fromNode":"aa3c3ba74fc8b742","fromSide":"right","toNode":"f1e74ce7ffa71717","toSide":"left"},
		{"id":"83d1782cad94fada","fromNode":"f1e74ce7ffa71717","fromSide":"bottom","toNode":"ee825ef50c00a9f0","toSide":"top"},
		{"id":"fb509b9585bdcd5c","fromNode":"528b99faf1ee53ed","fromSide":"right","toNode":"4a0e9a4f1ed4c8a7","toSide":"left"},
		{"id":"eb8e06a337b85e21","fromNode":"4a0e9a4f1ed4c8a7","fromSide":"right","toNode":"79ecc76872fc3935","toSide":"left"},
		{"id":"c251fcaf084e76f6","fromNode":"79ecc76872fc3935","fromSide":"right","toNode":"b0a7d140923069f7","toSide":"left"},
		{"id":"6df2760f10fed35c","fromNode":"79ecc76872fc3935","fromSide":"right","toNode":"b2cf8be41535b542","toSide":"left"},
		{"id":"a9259df5fc09c561","fromNode":"79ecc76872fc3935","fromSide":"right","toNode":"9531ddd79fb8491c","toSide":"left"},
		{"id":"5baa8d4755b554c4","fromNode":"9531ddd79fb8491c","fromSide":"right","toNode":"780b479b7072a542","toSide":"left"},
		{"id":"bbffee478fb2bacf","fromNode":"780b479b7072a542","fromSide":"bottom","toNode":"05c344d937176240","toSide":"top"},
		{"id":"4183df1079a028b6","fromNode":"05c344d937176240","fromSide":"right","toNode":"18433298244c3cc9","toSide":"left"},
		{"id":"23482c55c629a1d0","fromNode":"18433298244c3cc9","fromSide":"bottom","toNode":"99a251f518b0a219","toSide":"top"},
		{"id":"c8d8b1e651e5ed84","fromNode":"99a251f518b0a219","fromSide":"right","toNode":"c2a568ec4e21694d","toSide":"left"}
	]
}
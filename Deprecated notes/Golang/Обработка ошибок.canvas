{
	"nodes":[
		{"id":"ae7510f2cfc932a6","type":"group","x":-221,"y":-276,"width":3108,"height":536,"label":"Обработка ошибок"},
		{"id":"4da43b8bac9e1055","x":-209,"y":1340,"width":1519,"height":530,"type":"group","label":"Оператор defer"},
		{"id":"6f23c41a71295708","type":"group","x":-209,"y":840,"width":1779,"height":398,"label":"Оператор panic"},
		{"id":"b54cde4187391677","type":"group","x":-209,"y":495,"width":879,"height":247,"label":"Создание собственных ошибок"},
		{"id":"9beb658018b36657","type":"text","text":"Обработка ошибок","x":-201,"y":-40,"width":250,"height":60},
		{"id":"644bb349f34763dc","type":"text","text":"Процесс обнаружения ситуаций, когда ПО находится в неожиданном состоянии, а также принятие мер для записи диагностической информации (логов), которая будет полезна при последующей отладке","x":100,"y":-168,"width":250,"height":316},
		{"id":"3a1f26e09958cc1c","type":"text","text":"Значения с типом `error` - считаются ошибками в языке Go","x":400,"y":-53,"width":250,"height":87},
		{"id":"f1ab7e08fdf629fe","type":"text","text":"Для обработки ошибок необходимо проверить ошибки, которые могут возвращать функции и принять надлежащие меры для защиты данных и сообщить пользователям/операторам, что произошла ошибка","x":760,"y":-155,"width":250,"height":292},
		{"id":"473f406050b1f1e3","type":"text","text":"Практический пример","x":1082,"y":-39,"width":250,"height":60},
		{"id":"78069dfeda47dce8","type":"text","text":"```go\npackage main\n\nimport \"fmt\"\n\nfunc devide(a int, b int) int {\n\treturn a / b\n}\n\nfunc main() {\n\tvar input int\n\tfmt.Scan(&input)\n\tfmt.Println(devide(input, 5))\n}\n```","x":1400,"y":-183,"width":360,"height":349},
		{"id":"3d54acb313ba8438","type":"text","text":"Пользователь может совершить ошибку и подать на вход все что угодно, кроме int. Подобная ситуация решается следующим образом","x":1820,"y":-112,"width":250,"height":207},
		{"id":"6e5a461d1f958c5e","type":"text","text":"```go\npackage main\n\nimport \"fmt\"\n\nfunc devide(a, b int) int {\n\treturn a / b\n}\n\nfunc main() {\n\tvar a int\n\t// Функция Scan возвращает два параметра\n\t// Первый параметр - число, которое вводит пользователь\n\t// Второй параметр - ошибку, которая возвращается при каких-либо ситуациях\n\t// Именно поэтому первый аргумент пропускается (_), а второй - переменная err\n\t_, err := fmt.Scan(&a)\n\tif err != nil {\n\t\tfmt.Println(\"Проверьте типы входных параметров\")\n\t}\n\tfmt.Println(devide(a, 5))\n}\n```","x":2140,"y":-256,"width":727,"height":496},
		{"id":"afd7863b23652f16","type":"text","text":"Создание ошибок","x":-189,"y":588,"width":250,"height":60},
		{"id":"426fd36d68d75934","type":"text","text":"В стандартных библиотеках есть две функции - `errors.New` и `fmt.Errorf`. Обе функции позволяют указывать сообщение об ошибке","x":100,"y":515,"width":250,"height":207},
		{"id":"99460de86ee8f5ad","type":"text","text":"``errors.New`` - получает один аргумент: сообщение об ошибке в виде строки, которую можно настроить, чтобы предупредить пользователей","x":400,"y":515,"width":250,"height":207},
		{"id":"99094da8d19669bf","type":"text","text":"Позволяет сгенерировать ошибку и выйти из программы","x":100,"y":980,"width":250,"height":87},
		{"id":"6be1462f1766e2ae","type":"text","text":"Оператор `panic`","x":-189,"y":993,"width":250,"height":60},
		{"id":"0b66359811c42e06","type":"text","text":"```go\nfunc main() {\n\tfmt.Println(divide(15,5))\n\tfmt.Println(divide(4, 0))\n\tfmt.Println(\"Finish\")\n}\n\nfunc divide(x, y float64) float64 {\n\tif y == 0 {\n\t\tpanic(\"division by zero!\")\n\t}\n\treturn x / y\n}\n```","x":400,"y":860,"width":527,"height":328},
		{"id":"ae11ebd74af9a6d5","type":"text","text":"В оператор `panic` можно передать любое сообщение, которое будет выводиться на консоль","x":1000,"y":951,"width":250,"height":147},
		{"id":"34c10681d68f59dc","type":"text","text":"В данном случае, вывод будет `division by zero!`","x":1000,"y":1158,"width":250,"height":60},
		{"id":"124cd917c0781b15","type":"text","text":"После вызова паники, все последующие операции не будут выполняться","x":1300,"y":951,"width":250,"height":147},
		{"id":"3e1358461ed98205","type":"text","text":"Позволяет выполнить определенную операцию после каких-то действий (даже если будет паника), при этом не важно, где она вызывается","x":111,"y":1400,"width":250,"height":207},
		{"id":"f8fc02d7a99f681c","type":"text","text":"Оператор `defer`","x":-189,"y":1474,"width":250,"height":60},
		{"id":"1dba6216889fc49d","type":"text","text":"```go\nfunc main() {\n\tdefer finish()\n\tfmt.Println(\"1\")\n\tfmt.Println(\"3\")\n}\n\nfunc finish() {\n\tfmt.Println(\"2\")\n}\n// 1, 3, 2\n```","x":423,"y":1360,"width":250,"height":287},
		{"id":"81930f2d9ff3ab25","type":"text","text":"Функция `finish()` вызывается с оператором `defer`, поэтому она вызывается в самом конце","x":423,"y":1703,"width":250,"height":147},
		{"id":"25192e2c4e0e6703","type":"text","text":"`defer` запоминает значения переменных, которые были переданы в функцию. Помещает вызов функции в стек, выполняется в очередности Last in, first out (LIFO)","x":740,"y":1385,"width":247,"height":237},
		{"id":"ca6d1e8bff25d9a1","type":"text","text":"Если `defer` находится выше паники, то сначала выполняется `defer`, затем паника","x":1040,"y":1445,"width":250,"height":117}
	],
	"edges":[
		{"id":"e00695207e9c1fa6","fromNode":"9beb658018b36657","fromSide":"right","toNode":"644bb349f34763dc","toSide":"left"},
		{"id":"84cef098b92901cd","fromNode":"644bb349f34763dc","fromSide":"right","toNode":"3a1f26e09958cc1c","toSide":"left"},
		{"id":"1d9d3295f24bbc14","fromNode":"f1ab7e08fdf629fe","fromSide":"right","toNode":"473f406050b1f1e3","toSide":"left"},
		{"id":"e07b55b661c69732","fromNode":"473f406050b1f1e3","fromSide":"right","toNode":"78069dfeda47dce8","toSide":"left"},
		{"id":"33f0b1951b5d1f96","fromNode":"78069dfeda47dce8","fromSide":"right","toNode":"3d54acb313ba8438","toSide":"left"},
		{"id":"2b952ab6b73a9a18","fromNode":"3d54acb313ba8438","fromSide":"right","toNode":"6e5a461d1f958c5e","toSide":"left"},
		{"id":"15d5a886011558d7","fromNode":"3a1f26e09958cc1c","fromSide":"right","toNode":"f1ab7e08fdf629fe","toSide":"left"},
		{"id":"c8c2c5b889d0b819","fromNode":"afd7863b23652f16","fromSide":"right","toNode":"426fd36d68d75934","toSide":"left"},
		{"id":"7afc8547a33c949f","fromNode":"426fd36d68d75934","fromSide":"right","toNode":"99460de86ee8f5ad","toSide":"left"},
		{"id":"bb68f80379c1e6a0","fromNode":"6be1462f1766e2ae","fromSide":"right","toNode":"99094da8d19669bf","toSide":"left"},
		{"id":"d3a8bb3178976372","fromNode":"99094da8d19669bf","fromSide":"right","toNode":"0b66359811c42e06","toSide":"left"},
		{"id":"95396a84fcd880a7","fromNode":"0b66359811c42e06","fromSide":"right","toNode":"ae11ebd74af9a6d5","toSide":"left"},
		{"id":"97a2520c64bf41ab","fromNode":"ae11ebd74af9a6d5","fromSide":"bottom","toNode":"34c10681d68f59dc","toSide":"top"},
		{"id":"5f736642ccf785db","fromNode":"ae11ebd74af9a6d5","fromSide":"right","toNode":"124cd917c0781b15","toSide":"left"},
		{"id":"10479574292c171b","fromNode":"f8fc02d7a99f681c","fromSide":"right","toNode":"3e1358461ed98205","toSide":"left"},
		{"id":"80e1adccf13105b5","fromNode":"3e1358461ed98205","fromSide":"right","toNode":"1dba6216889fc49d","toSide":"left"},
		{"id":"85ef9404b82359bf","fromNode":"1dba6216889fc49d","fromSide":"bottom","toNode":"81930f2d9ff3ab25","toSide":"top"},
		{"id":"2912e5a9031a6a7a","fromNode":"1dba6216889fc49d","fromSide":"right","toNode":"25192e2c4e0e6703","toSide":"left"},
		{"id":"227009342f04aaff","fromNode":"25192e2c4e0e6703","fromSide":"right","toNode":"ca6d1e8bff25d9a1","toSide":"left"}
	]
}
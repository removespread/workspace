{
	"nodes":[
		{"id":"c3a3ad38267144dd","type":"group","x":-140,"y":-118,"width":2650,"height":900,"label":"Значение интерфейсов"},
		{"id":"75c349ee8c7e0127","type":"group","x":-140,"y":1920,"width":1821,"height":1097,"label":"Типы ошибок. Создание собственного типа ошибки"},
		{"id":"892bfe186a2db948","type":"group","x":-140,"y":1140,"width":1320,"height":493,"label":"Встраивание интерфейсов"},
		{"id":"c98656c91f3fc288","type":"group","x":-140,"y":1671,"width":1510,"height":187,"label":"Интерфейс error"},
		{"id":"e92a6108bf9ce4a0","type":"group","x":-140,"y":860,"width":1250,"height":188,"label":"Пустой интерфейс"},
		{"id":"6196cec3731b2aac","type":"text","text":"Представляет из себя контракт, определяющий методы, которым обязать обладать объект, удовлетворяющий интерфейсу","x":200,"y":-98,"width":250,"height":207},
		{"id":"0f2953491e459d98","type":"text","text":"Интерфейсы, как и другие типы, объявляются с помощью ключевого слова `type`, после которого идет имя интерфейса, а затем его описание","x":540,"y":-98,"width":250,"height":207},
		{"id":"369056ae7e37d0f0","type":"text","text":"Интерфейсы","x":-120,"y":-24,"width":250,"height":60},
		{"id":"a04a86be1ee3324e","type":"text","text":"В фигурных скобках указываются методы, которые должны быть реализованы типами, чтобы они \"удовлетворяли\" данному интерфейсу","x":540,"y":140,"width":250,"height":207},
		{"id":"00e7f409ada110f0","type":"text","text":"Для удовлетворения интерфейсу тип должен реализовать все его методы","x":840,"y":185,"width":250,"height":117},
		{"id":"ed59c953b0e9fd03","type":"text","text":"Реализация таких методов может быть различной, но важно, чтобы методы соответствовали по сигнатуре (тип и количество возвращаемых значений)","x":1140,"y":110,"width":250,"height":267},
		{"id":"86547ddaebb2b49c","type":"text","text":"Пример объявления интерфейсов на основе стандартных интерфейсов пакета `io`","x":1460,"y":185,"width":250,"height":117},
		{"id":"2afc200085bc2cb0","type":"text","text":"```go\ntype Reader interface {\n\tRead(p []byte) (n int, err error)\n}\n\ntype Writer interface {\n\tWrite(p []byte) (n int, err error)\n}\n```","x":1760,"y":138,"width":389,"height":211},
		{"id":"5c9e6a4bbea1667d","type":"text","text":"`Reader` интерфейс требует, чтобы тип реализовывал метод `Read`, который принимает срез байт (`p`) и возвращает два значения: количество прочитанных байт и ошибку","x":2240,"y":-98,"width":250,"height":267},
		{"id":"4179e57af12fbdf7","type":"text","text":"`Writer` интерфейс требует, чтобы тип реализовал метод `Write`, который принимает срез байт (`p`) и возвращает два значения: количество записанных байт и ошибку","x":2240,"y":302,"width":250,"height":267},
		{"id":"c122a37962f05ca8","type":"text","text":"Интерфейсы не содержат конкретной реализации, они только задают обязательные методы, которые должны присутствовать у типа, чтобы он удовлетворял интерфейсу. Тип реализует интерфейс, предоставляя свою собственную реализацию этих методов","x":1055,"y":569,"width":420,"height":178},
		{"id":"ddeeeae7b18bfbd5","type":"text","text":"Благодаря этому, интерфейсы позволяют создавать абстракции, не зависимые от конкретной реализации, что делает код гибким и расширяемым","x":1540,"y":555,"width":250,"height":207},
		{"id":"5dbc24982a608164","type":"text","text":"ВНИМАНИЕ НА СТАТЬЮ https://habr.com/en/companies/vk/articles/463063/\nИ НА ЭТУ ТОЖЕ https://golangify.com/interface","x":-100,"y":-460,"width":668,"height":58,"color":"1"},
		{"id":"7715b39e7e360edc","type":"text","text":"Пустые интерфейсы используются в коде, где необходимо работать со значениями неизвестного типа","x":520,"y":881,"width":250,"height":147},
		{"id":"09be16006cb1e8fe","type":"text","text":"Например, `fmt.Print()` принимает любое количество аргументов типа `interface{}`","x":840,"y":896,"width":250,"height":117},
		{"id":"55130107191e0c3f","type":"text","text":"Интерфейс, который не содержит ни одного метода называется пустым интерфейсом: `interface{}`","x":-120,"y":880,"width":250,"height":147},
		{"id":"af319852afe7f49d","type":"text","text":"Пустой интерфейс может содержать значение любого типа","x":199,"y":911,"width":250,"height":87},
		{"id":"601c236c11b201e8","type":"text","text":"Golang позволяет совмещать интерфейсы, чтобы показать, что объект должен удовлетворять обоим интерфейсам. Это реализуется через создание нового интерфейса, в который требуемые интерфейсы встраиваются","x":520,"y":1160,"width":250,"height":316},
		{"id":"29a76d9ca8a50343","type":"text","text":"```go\ntype ReadWriter interface {\n\tReader // io.Reader\n\tWriter // io.Writer\n}\n```","x":838,"y":1244,"width":322,"height":148},
		{"id":"69f5300eac96fd9b","type":"text","text":"Таким образом Golang будет проверять, что у объекта есть методы обязательные для обоих интерфейсов: Read и Write","x":874,"y":1436,"width":250,"height":177},
		{"id":"be60886e6b325bd8","type":"text","text":"Встраивание интерфейса","x":-120,"y":1288,"width":250,"height":60},
		{"id":"c4f60a7cc883f3b8","type":"text","text":"Если необходимо использовать функцию лишь для чтения данных, то разумно использовать в качестве аргумента интерфейс `io.Reader`, а если для записи, то `io.Writer`","x":199,"y":1199,"width":250,"height":237},
		{"id":"993b1ce26083014f","type":"text","text":"Интерфейс `error` выглядит следующим образом","x":191,"y":1721,"width":250,"height":87},
		{"id":"8277013152d2accd","type":"text","text":"Интерфейс `error`","x":-120,"y":1735,"width":250,"height":60},
		{"id":"207587f22100e866","type":"text","text":"```go\ntype error interface {\n\tError()\n}\n```","x":480,"y":1711,"width":266,"height":106},
		{"id":"5b6020b5bc5d5139","type":"text","text":"Это поможет создавать собственные типы ошибок, хранящие сведения о возникшей проблеме","x":800,"y":1691,"width":250,"height":147},
		{"id":"8303bbb7704cca63","type":"text","text":"Если же базовой реализации стандартной библиотеки достаточно, то можно использовать пакеты `errors` или `fmt`","x":1100,"y":1691,"width":250,"height":147},
		{"id":"bf3eea953e9dc02a","type":"text","text":"Допустим, функция получает в качестве аргумента строку, которая не должна содержать цифр, а если это не так, то необходимо прервать обработку и вернуть в качестве контекста позицию в строке, на которой обнаружена цифра","x":520,"y":2186,"width":250,"height":340},
		{"id":"4dd6f33793f7044a","type":"text","text":"В ряде случаем может быть не достаточно информации об ошибки в виде строки, и нужно добавить ее в какой-то контекст. В этом случае есть возможность добавить собственный тип, удовлетворяющий интерфейсу `error`","x":198,"y":2210,"width":250,"height":292},
		{"id":"ac488810a1e9df0b","type":"text","text":"Типы ошибок. Создание собственного типа ошибки","x":-120,"y":2312,"width":250,"height":87},
		{"id":"97a02c90efbde80d","type":"text","text":"```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\ntype customError uint\n\nfunc (c customError) Error() string {\n\treturn fmt.Sprintf(\"цифра, индекс %d\", c)\n}\n\nfunc errorInString(str string) error {\n\t// Часть полезного кода по работе со строкой проигнорирована\n\tfor i, s := range str {\n\t\tfor i, s := range str {\n\t\t\tif unicode.IsDigit(s) {\n\t\t\t\treturn customError(i)\n\t\t\t}\n\t\t}\n\t\treturn nil\n}\n\nfunc main() {\n\terr := errorInString(\"string1string\")\n\tif err != nil {\n\t\tfmt.Printf(\"Ошибка обработана: %v\\n\", err)\n\t}\n\tif cError, ok := err.(customError); ok {\n\t\tfmt.Printf(\"Контекст: %d\\n\", cError)\n\t}\n\t// Output:\n\t// Ошибка обработана: цифра, индекс 6\n\t// Контекст: 6\n}\n```","x":874,"y":1940,"width":787,"height":832},
		{"id":"107621e159dfc3f8","type":"text","text":"В данном примере создается свой тип ошибки, вернули его, привели его тип из интерфейса в требуемый контекст","x":1143,"y":2820,"width":250,"height":177},
		{"id":"b56aeb4b33bffb4e","type":"text","text":"Функция `String()` возвращает текстовое представление объекта: функции из пакета `fmt` проверяют, удовлетворяет ли переданный функции аргумент интерфейсу `Stringer`, и если удовлетворяет - он выводится на печать в заданном формате","x":850,"y":3153,"width":250,"height":340},
		{"id":"b814f93bf4915ade","type":"text","text":"Популярный интерфейс из стандартной библиотеки `fmt.Stringer`","x":171,"y":3264,"width":250,"height":117},
		{"id":"5aff9a3d5a0b48e1","type":"text","text":"```go\ntype Stringer interface {\n\tString() string\n}\n```","x":493,"y":3270,"width":305,"height":106},
		{"id":"99c44272a5bf48df","type":"text","text":"Интерфейс Stringer","x":-120,"y":3292,"width":250,"height":60},
		{"id":"1dc43999a7beeefa","x":1180,"y":3107,"width":595,"height":433,"type":"text","text":"```go\ntype Animal struct {\n\tName string\n\tAge uint\n}\n\nfunc (a Animal) String() string {\n\treturn fmt.Sprintf(\"%v (%d)\", a.Name, a.Age)\n}\n\nfunc ExampleStringer() {\n\ta := Animal{\n\t\tName: \"Gopher\",\n\t\tAge: 2,\n\t}\n\tfmt.Println(a)\n}\n// Output: Gopher (2)\n```"}
	],
	"edges":[
		{"id":"f1e1a3130fef75c9","fromNode":"369056ae7e37d0f0","fromSide":"right","toNode":"6196cec3731b2aac","toSide":"left"},
		{"id":"50f0e265be9bf1e2","fromNode":"6196cec3731b2aac","fromSide":"right","toNode":"0f2953491e459d98","toSide":"left"},
		{"id":"ec80ae0d642b62c9","fromNode":"0f2953491e459d98","fromSide":"bottom","toNode":"a04a86be1ee3324e","toSide":"top"},
		{"id":"9475498f83e8ece2","fromNode":"a04a86be1ee3324e","fromSide":"right","toNode":"00e7f409ada110f0","toSide":"left"},
		{"id":"c3e9e28451ea79fe","fromNode":"00e7f409ada110f0","fromSide":"right","toNode":"ed59c953b0e9fd03","toSide":"left"},
		{"id":"a82d38c327256cb0","fromNode":"ed59c953b0e9fd03","fromSide":"right","toNode":"86547ddaebb2b49c","toSide":"left"},
		{"id":"92b6fa9d9474de2c","fromNode":"86547ddaebb2b49c","fromSide":"right","toNode":"2afc200085bc2cb0","toSide":"left"},
		{"id":"18a355840577b2eb","fromNode":"2afc200085bc2cb0","fromSide":"right","toNode":"5c9e6a4bbea1667d","toSide":"left"},
		{"id":"e0d66a0737f2eec8","fromNode":"2afc200085bc2cb0","fromSide":"right","toNode":"4179e57af12fbdf7","toSide":"left"},
		{"id":"12b239e3282891f1","fromNode":"ed59c953b0e9fd03","fromSide":"bottom","toNode":"c122a37962f05ca8","toSide":"top"},
		{"id":"ad791c15b05ffbac","fromNode":"c122a37962f05ca8","fromSide":"right","toNode":"ddeeeae7b18bfbd5","toSide":"left"},
		{"id":"c26f26c4c8bde5ca","fromNode":"55130107191e0c3f","fromSide":"right","toNode":"af319852afe7f49d","toSide":"left"},
		{"id":"0582fdf270361d7c","fromNode":"7715b39e7e360edc","fromSide":"right","toNode":"09be16006cb1e8fe","toSide":"left"},
		{"id":"21584baf8fcf0846","fromNode":"af319852afe7f49d","fromSide":"right","toNode":"7715b39e7e360edc","toSide":"left"},
		{"id":"dab5dadfe73ce487","fromNode":"be60886e6b325bd8","fromSide":"right","toNode":"c4f60a7cc883f3b8","toSide":"left"},
		{"id":"84d326a0f52d433e","fromNode":"c4f60a7cc883f3b8","fromSide":"right","toNode":"601c236c11b201e8","toSide":"left"},
		{"id":"6c54e77f9c7d5e38","fromNode":"601c236c11b201e8","fromSide":"right","toNode":"29a76d9ca8a50343","toSide":"left"},
		{"id":"02afb70d2ee6144d","fromNode":"29a76d9ca8a50343","fromSide":"bottom","toNode":"69f5300eac96fd9b","toSide":"top"},
		{"id":"1f59987f5094cdac","fromNode":"8277013152d2accd","fromSide":"right","toNode":"993b1ce26083014f","toSide":"left"},
		{"id":"6f3070ce42566fef","fromNode":"993b1ce26083014f","fromSide":"right","toNode":"207587f22100e866","toSide":"left"},
		{"id":"fb3d582040e0d6e8","fromNode":"207587f22100e866","fromSide":"right","toNode":"5b6020b5bc5d5139","toSide":"left"},
		{"id":"f2fa94d68a38b2ed","fromNode":"5b6020b5bc5d5139","fromSide":"right","toNode":"8303bbb7704cca63","toSide":"left"},
		{"id":"307fc8f8ddd43130","fromNode":"ac488810a1e9df0b","fromSide":"right","toNode":"4dd6f33793f7044a","toSide":"left"},
		{"id":"614153776c8322a4","fromNode":"4dd6f33793f7044a","fromSide":"right","toNode":"bf3eea953e9dc02a","toSide":"left"},
		{"id":"cc3e5c2a35fa3e5e","fromNode":"bf3eea953e9dc02a","fromSide":"right","toNode":"97a02c90efbde80d","toSide":"left"},
		{"id":"7b5fcdbe794343d0","fromNode":"97a02c90efbde80d","fromSide":"bottom","toNode":"107621e159dfc3f8","toSide":"top"},
		{"id":"f8ac4aa584e7897d","fromNode":"99c44272a5bf48df","fromSide":"right","toNode":"b814f93bf4915ade","toSide":"left"},
		{"id":"d5fc344e483ad63d","fromNode":"b814f93bf4915ade","fromSide":"right","toNode":"5aff9a3d5a0b48e1","toSide":"left"},
		{"id":"162b51a1e7b71f29","fromNode":"5aff9a3d5a0b48e1","fromSide":"right","toNode":"b56aeb4b33bffb4e","toSide":"left"},
		{"id":"dd57f422800c0f81","fromNode":"b56aeb4b33bffb4e","fromSide":"right","toNode":"1dc43999a7beeefa","toSide":"left"}
	]
}